using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using IVSDClient.Models;

namespace IVSDClient
{
    /// <summary>
    /// Interaction logic for DisplayWindow.xaml
    /// </summary>
    public partial class DisplayWindow : Window
    {
        public IVSDServerCurrentState cs;
        
        private bool isMaximized = false;
        private FileSystemWatcher IVSDCurrentStateJSONWatcher;
        private string lastJSONFilePath = "";
        
        public DisplayWindow()
        {
            InitializeComponent(); 

            IVSDCurrentStateJSONWatcher = new FileSystemWatcher();
            IVSDCurrentStateJSONWatcher.NotifyFilter = NotifyFilters.LastWrite;
            IVSDCurrentStateJSONWatcher.Filter = "*.json";
            IVSDCurrentStateJSONWatcher.IncludeSubdirectories = true;
            IVSDCurrentStateJSONWatcher.Changed += new FileSystemEventHandler(OnIVSDCurrentStateJSONChanged);
        }

        public DisplayWindow(string watchFolder, List<int> vehicles, List<int> stations) : this()
        {
            IVSDCurrentStateJSONWatcher.Path = watchFolder;
            IVSDCurrentStateJSONWatcher.EnableRaisingEvents = true;   
            
            MainUniformGrid.Children.Clear();
            foreach (var i in vehicles)
            {
                var vdc = new VehicleDisplayControl(i);
                MainUniformGrid.Children.Add(vdc);
            }
            foreach (var i in stations)
            {
                var sdc = new StationDisplayControl(i);
                MainUniformGrid.Children.Add(sdc);
            }
        }

        private void OnIVSDCurrentStateJSONChanged(object sender, FileSystemEventArgs e)
        {
            if (lastJSONFilePath != "")
            {
                try
                {
                    using (var fileStream = new FileStream(lastJSONFilePath, FileMode.Open, FileAccess.Read))
                        cs = JsonSerializer.Deserialize<IVSDServerCurrentState>(fileStream);
                    
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                this.Dispatcher.BeginInvoke(() => { SyncObjectsToChildren(); });
            }
            lastJSONFilePath = e.FullPath; //We're doing this to prevent file access conflicts, cycling between multiple JSON files generated by the Transport Fever 2 IVSD mod
        }

        public void SyncObjectsToChildren()
        {
            foreach (var dc in MainUniformGrid.Children)
            {
                if (dc is VehicleDisplayControl)
                {
                    var vdc = dc as VehicleDisplayControl;
                    vdc.cs = cs;
                    vdc.ProcessUpdatedCurrentState();                       
                }
                else if (dc is StationDisplayControl)
                {
                    var sdc = dc as StationDisplayControl;
                    sdc.cs = cs;
                    sdc.ProcessUpdatedCurrentState();  
                }
            } 
        }
        
        private void Window_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (isMaximized)
            {
                this.WindowState = WindowState.Normal;
                this.WindowStyle = WindowStyle.SingleBorderWindow;
            }
            else
            {
                this.WindowState = WindowState.Maximized;
                this.WindowStyle = WindowStyle.None;
            }
            isMaximized = !isMaximized;
        }
    }
}
