using IVSDClient.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using System.Windows.Threading;

namespace IVSDClient
{
    /// <summary>
    /// Interaction logic for StationDisplayWindow.xaml
    /// </summary>
    public partial class StationDisplayWindow : Window
    {
        public int MonitoredStationID = 0;
        public IVSDServerCurrentState cs;
        public Station monitoredStation = new Station();
        public List<Vehicle> nextArrivingVehicles = new List<Vehicle>();

        private FileSystemWatcher IVSDCurrentStateJSONWatcher;
        private string lastJSONFilePath = "";
        private bool isMaximized = false;

        public StationDisplayWindow()
        {
            InitializeComponent();

            IVSDCurrentStateJSONWatcher = new FileSystemWatcher(@"C:\Games\Transport Fever 2");
            IVSDCurrentStateJSONWatcher.NotifyFilter = NotifyFilters.LastWrite;
            IVSDCurrentStateJSONWatcher.Filter = "*.json";
            IVSDCurrentStateJSONWatcher.IncludeSubdirectories = true;
            IVSDCurrentStateJSONWatcher.Changed += new FileSystemEventHandler(OnIVSDCurrentStateJSONChanged);
            IVSDCurrentStateJSONWatcher.EnableRaisingEvents = true;

            //ProcessUpdatedJSON(@"C:\Games\Transport Fever 2\IVSDCurrentState_0.json");
            //UpdateUI();
        }

        public StationDisplayWindow(int stationID) : this()
        {
            MonitoredStationID = stationID;
        }

        private void OnIVSDCurrentStateJSONChanged(object sender, FileSystemEventArgs e)
        {
            Console.WriteLine($"Changed: {e.FullPath}");
            if (lastJSONFilePath != "")
            {
                ProcessUpdatedJSON(lastJSONFilePath);
                this.Dispatcher.BeginInvoke(() => { UpdateUI(); });
            }
            lastJSONFilePath = e.FullPath; //We're doing this to prevent file access conflicts, cycling between multiple JSON files generated by the Transport Fever 2 IVSD mod
        }

        private void ProcessUpdatedJSON(string path)
        {
            try
            {
                using (var fileStream = new FileStream(lastJSONFilePath, FileMode.Open, FileAccess.Read))
                    cs = JsonSerializer.Deserialize<IVSDServerCurrentState>(fileStream);

                monitoredStation = cs.stations.FirstOrDefault(v => v.id == MonitoredStationID);
                
                nextArrivingVehicles = new List<Vehicle>();
                foreach (var vehicle in cs.vehicles.Where(v => v.line != -1)) //Using custom foreach to not calculate the line twice as is the case if we use LINQ
                {
                    var line = cs.lines.FirstOrDefault(l => l.id == vehicle.line);
                    if (line.stops[vehicle.stopIndex] == monitoredStation.id || line.stops[vehicle.stopIndex] == monitoredStation.stationGroup)
                        nextArrivingVehicles.Add(vehicle);
                }

                nextArrivingVehicles = nextArrivingVehicles
                    .OrderBy(v => Calculate3DDistance(v.position[0], v.position[1], v.position[2],
                        monitoredStation.position[0], monitoredStation.position[1], monitoredStation.position[2]))
                    .Take(8) //Can be changed if more arrivals are desired to appear on-screen
                    .OrderBy(v=>v.state != "AT_TERMINAL") //This is so that trains that are in the station are at the top of the list
                    .ToList();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        private void UpdateUI()
        {
            this.Title = "Station display - " + monitoredStation.name;
            StationNameLabel.Content = monitoredStation.name;
            
            NextArrivalsWrapPanel.Children.Clear();
            foreach(var vehicle in nextArrivingVehicles){
                var vehicleLine = cs.lines.FirstOrDefault(l => l.id == vehicle.line);
                string timeLeft = "";
                if (vehicle.state == "AT_TERMINAL")
                    timeLeft = "Here";
                else
                    timeLeft = Math.Round(Calculate3DDistance(vehicle.position[0], vehicle.position[1], vehicle.position[2],
                        monitoredStation.position[0], monitoredStation.position[1], monitoredStation.position[2])/1000,0)+"m";
                int towardsStopID = vehicleLine.stops[(vehicle.stopIndex + 1) % vehicleLine.stops.Count];
                var NextArrivalControl = new NextArrivalControl(vehicleLine.name, "towards "+cs.stations.FirstOrDefault(s=>s.id == towardsStopID || s.stationGroup == towardsStopID).name, timeLeft);

                if (vehicle.state == "AT_TERMINAL")
                    NextArrivalControl.SetColor(true);
                NextArrivalControl.HorizontalAlignment = HorizontalAlignment.Stretch;
                NextArrivalsWrapPanel.Children.Add(NextArrivalControl);
            }
        }
        
        private double Calculate3DDistance(double x1, double y1, double z1, double x2, double y2, double z2)
        {
            return Math.Sqrt(Math.Pow(x2 - x1, 2) + Math.Pow(y2 - y1, 2) + Math.Pow(z2 - z1, 2));
        }

        private void Window_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (isMaximized)
            {
                this.WindowState = WindowState.Normal;
                this.WindowStyle = WindowStyle.SingleBorderWindow;
            }
            else
            {
                this.WindowState = WindowState.Maximized;
                this.WindowStyle = WindowStyle.None;
            }
            isMaximized = !isMaximized;
        }
    }
}